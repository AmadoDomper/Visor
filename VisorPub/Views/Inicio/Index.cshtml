@{
    Layout = null;
}
<!DOCTYPE html>
<html>
<head>
    <title>Visor de mapas de Publicaciones</title>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0, user-scalable=no">
    <link href="~/Content/css/ol/v4.6.5/ol.css" rel="stylesheet" type="text/css"  />
</head>
<body>
    <div id="map"></div>
    <div id="info"></div>
    <div id="info-det"></div>
    <button type="button" id="btnSelec">Selección</button> <button type="button" id="btnDeselec">Deselección</button>
    <script src="~/Content/js/visor/data.js" async></script>
    <script src="~/Content/js/ol/v4.6.5/ol.js"></script>
    <script type="text/javascript">
        var map;
        var zoom = 6;
        var center = ol.proj.transform(
            [-75, -4.4], 'EPSG:4326', 'EPSG:3857')
        var rotation = 0;

        /* Fast location url */
        if (window.location.hash !== '') {
            var hash = window.location.hash.replace('#map=', '');
            var parts = hash.split('/');
            if (parts.length === 4) {
                zoom = parseInt(parts[0], 10);
                center = [
                    parseFloat(parts[1]),
                    parseFloat(parts[2])
                ];
                rotation = parseFloat(parts[3]);
            }
        }

        /* Add map layer */
        var baseLayer = new ol.layer.Tile({
            source: new ol.source.OSM({
                projection: 'EPSG:3857',
                url: 'http://mt{0-3}.google.com/vt/lyrs=m&x={x}&y={y}&z={z}',
                attributions: [
                ]
            })
        });

        /* Add view */
        var view = new ol.View({
            center: center,
            zoom: zoom,
            rotation: rotation
        });

        /* Style point */
        var styleFunction = (function (feature) {
            console.log(feature);
            /* jshint -W069 */
            var styles = {};
            var image = new ol.style.Circle({
                radius: 10, /* 5 */
                fill: new ol.style.Fill({ color: '#ff4444' }),
                stroke: new ol.style.Stroke({ color: '#FFF', width: 1 })
            });
            styles['Point'] = [new ol.style.Style({
                image: image,
                text: new ol.style.Text({
                    font: '12px Calibri,sans-serif',
                    fill: new ol.style.Fill({
                        color: '#000'
                    }),
                    stroke: new ol.style.Stroke({
                        color: '#fff',
                        width: 3
                    })
                })
            })];
            styles['default'] = [new ol.style.Style({
                stroke: new ol.style.Stroke({
                    color: 'yellow',
                    width: 11
                }),
                fill: new ol.style.Fill({
                    color: 'rgba(255, 5, 0, 0.1)'
                }),
                image: image
            })];
            return function (feature, resolution) {
                //styles['Point'][0].getText().setText(feature.get('idpublicacion').toString())
                return styles[feature.getGeometry().getType()] || styles['default'];
            };
            /* jshint +W069 */
        })();

        /* Add layer of point features */
        var pointsLayer = new ol.layer.Vector({
            title: 'random points',
            source: new ol.source.Vector({
                url: '@(Request.Url.AbsoluteUri + "api/PublicacionApi/getAllPublicationPoints")',
                format: new ol.format.GeoJSON()
            }),
            style: styleFunction
        });

        /* Initialise map */
        function init() {
            map = new ol.Map({
                target: 'map',
                //the type of rendered we want to use.
                renderer: 'canvas',
                view: view,
                controls: ol.control.defaults().extend([
                    new ol.control.ScaleLine(),
                    new ol.control.ZoomSlider(),
                    new ol.control.FullScreen()
                ])
            });
            map.addLayer(baseLayer);
            map.addLayer(pointsLayer);
        }

        init();

        /* //////////// ADD SELECTION */

        /* add ol.collection to hold all selected features */
        //var select = new ol.interaction.Select();
        //map.addInteraction(select);
        //var selectedFeatures = select.getFeatures();

        /* //////////// ADD DRAWING */

        /* The current drawing */
        var sketch;

        /* Add drawing vector source */
        var drawingSource = new ol.source.Vector({
            useSpatialIndex: false
        });

        /* Add drawing layer */
        var drawingLayer = new ol.layer.Vector({
            source: drawingSource
        });
        map.addLayer(drawingLayer);

        /* Declare interactions and listener globally so we
            can attach listeners to them later. */
        var draw;
        var modify;
        var listener;

        //// Drawing interaction
        draw = new ol.interaction.Draw({
            source: drawingSource,
            type: 'Polygon',
            //only draw when Ctrl is pressed.
            //condition: ol.events.condition.platformModifierKeyOnly
        });
        //map.addInteraction(draw);

        ///* Deactivate select and delete any existing polygons.
        //    Only one polygon drawn at a time. */
        //draw.on('drawstart', function (event) {
        //    drawingSource.clear();
        //    //selectedFeatures.clear();
        //    select.setActive(false);

        //    sketch = event.feature;

        //    listener = sketch.getGeometry().on('change', function (event) {
        //        selectedFeatures.clear();
        //        var polygon = event.target;
        //        var features = pointsLayer.getSource().getFeatures();

        //        for (var i = 0; i < features.length; i++) {
        //            if (polygon.intersectsExtent(features[i].getGeometry().getExtent())) {
        //                selectedFeatures.push(features[i]);
        //            }
        //        }
        //    });
        //}, this);


        ///* Reactivate select after 300ms (to avoid single click trigger)
        //    and create final set of selected features. */
        //draw.on('drawend', function (event) {
        //    sketch = null;
        //    delaySelectActivate();
        //    selectedFeatures.clear();

        //    var polygon = event.feature.getGeometry();
        //    var features = pointsLayer.getSource().getFeatures();

        //    for (var i = 0; i < features.length; i++) {
        //        if (polygon.intersectsExtent(features[i].getGeometry().getExtent())) {
        //            selectedFeatures.push(features[i]);
        //        }
        //    }


        //});


        ///* Modify polygons interaction */

        //var modify = new ol.interaction.Modify({
        //    //only allow modification of drawn polygons
        //    features: drawingSource.getFeaturesCollection()
        //});
        //map.addInteraction(modify);

        ///* Point features select/deselect as you move polygon.
        //    Deactivate select interaction. */
        //modify.on('modifystart', function (event) {
        //    sketch = event.features;
        //    select.setActive(false);
        //    listener = event.features.getArray()[0].getGeometry().on('change', function (event) {
        //        // clear features so they deselect when polygon moves away
        //        selectedFeatures.clear();
        //        var polygon = event.target;
        //        var features = pointsLayer.getSource().getFeatures();

        //        for (var i = 0; i < features.length; i++) {
        //            if (polygon.intersectsExtent(features[i].getGeometry().getExtent())) {
        //                selectedFeatures.push(features[i]);
        //            }
        //        }
        //    });
        //}, this);

        ///* Reactivate select function */
        //modify.on('modifyend', function (event) {
        //    sketch = null;
        //    delaySelectActivate();
        //    selectedFeatures.clear();
        //    var polygon = event.features.getArray()[0].getGeometry();
        //    var features = pointsLayer.getSource().getFeatures();

        //    for (var i = 0; i < features.length; i++) {
        //        if (polygon.intersectsExtent(features[i].getGeometry().getExtent())) {
        //            selectedFeatures.push(features[i]);
        //        }
        //    }

        //}, this);


        ///* //////////// SUPPORTING FUNCTIONS */

        //function delaySelectActivate() {
        //    setTimeout(function () {
        //        select.setActive(true)
        //    }, 300);
        //}




        /* permalink */
        var shouldUpdate = true;
        var view = map.getView();
        var updatePermalink = function () {
            if (!shouldUpdate) {
                // do not update the URL when the view was changed in the 'popstate' handler
                shouldUpdate = true;
                return;
            }

            var center = view.getCenter();
            var hash = '#map=' +
                view.getZoom() + '/' +
                Math.round(center[0] * 100) / 100 + '/' +
                Math.round(center[1] * 100) / 100 + '/' +
                view.getRotation();
            var state = {
                zoom: view.getZoom(),
                center: view.getCenter(),
                rotation: view.getRotation()
            };
            window.history.pushState(state, 'map', hash);
        };

        map.on('moveend', updatePermalink);

        window.addEventListener('popstate', function (event) {
            if (event.state === null) {
                return;
            }
            map.getView().setCenter(event.state.center);
            map.getView().setZoom(event.state.zoom);
            map.getView().setRotation(event.state.rotation);
            shouldUpdate = false;
        });


        /*Highlight points*/

        var highlightStyle = new ol.style.Style({
            image: new ol.style.Circle({
                radius: 10, /* 5 */
                fill: new ol.style.Fill({ color: '#ed38db' }),
                stroke: new ol.style.Stroke({ color: '#FFF', width: 1 })
            })
            //stroke: new ol.style.Stroke({
            //    color: '#f00',
            //    width: 1
            //}),
            //fill: new ol.style.Fill({
            //    color: 'rgba(255,0,0,0.1)'
            //}),
            //text: new ol.style.Text({
            //    font: '12px Calibri,sans-serif',
            //    fill: new ol.style.Fill({
            //        color: '#000'
            //    }),
            //    stroke: new ol.style.Stroke({
            //        color: '#f00',
            //        width: 3
            //    })
            //})
        });

        var featureOverlay = new ol.layer.Vector({
            source: new ol.source.Vector(),
            map: map,
            style: function (feature) {
                //highlightStyle.getText().setText(feature.get('name'));
                return highlightStyle;
            }
        });

        var highlight;
        var prueba
        var displayFeatureInfo = function (pixel) {
            //pixel[0] = +pixel[0].toFixed(6);
            //pixel[1] = +pixel[1].toFixed(6);
            //console.log(pixel);
            var feature = map.forEachFeatureAtPixel(pixel, function (feature) {
                //console.log('Punto:');
                //console.log(feature.get('idpunto'));
                return feature;
            });
            console.log("Show Feature");
            console.log(feature);
            prueba = feature;

            let info = document.getElementById('info');
            
            if (feature) {
                //console.log('True feature')
                //info.innerHTML = feature.getId() + ': ' + feature.get('idpunto') + 'Publicacion: ' + feature.get('idpublicacion');
                info.innerHTML = 'Punto' + ': ' + feature.get('idpunto') + ' ' + 'Publicacion: ' + feature.get('idpublicacion');
                //PublicationInfo(feature.get('idpublicacion'));
                console.log('call api Publication Info');
            } else {
                info.innerHTML = '&nbsp;';
            }

            if (feature !== highlight) {
                if (highlight) {
                    featureOverlay.getSource().removeFeature(highlight);
                }
                if (feature) {
                    featureOverlay.getSource().addFeature(feature);
                }
                highlight = feature;
            }

        };

        map.on('pointermove', function (evt) {
            if (evt.dragging) {
                return;
            }
            //var pixel = map.getEventPixel(evt.originalEvent);
            //displayFeatureInfo(pixel);
        });

        map.on('click', function (evt) {
            displayFeatureInfo(evt.pixel);
            console.log(evt.pixel);
        });


    </script>
</body>
</html>